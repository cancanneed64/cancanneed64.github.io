[{"content":"Go 语言入门 1. 运行环境安装 中文网\n安装 VSCODE 后进行环境变量设置代理\n教程\n示例\n1 2 3 4 5 6 7 8 9 10 11 package main // 程序包名称 import \u0026#34;fmt\u0026#34; //main函数 func main(){ fmt.Println(\u0026#34;halo go\u0026#34;) } 终端\n1 2 3 4 5 go run hello.go go build hello.go //生成二进制文件 ./hello.go //生成二进制文件 注意点\n分号结尾不影响使用 函数的{和函数名同一行不然报错 注释用//和/* */ fmt 中 Println 空一行，Printf 表示格式化输出，%s 表示原字符，%T 表示类型，Sprintf(格式，变量) 2. 基础语法 无效标识符\n以数字开头 Go 语言关键字 运算符 导入包\n方法名需要首字母大写，否则只能在包内调用 导入包不使用会报错，前面加上_无法调用会执行内部 init 方法，起别名可直接调用，加上.可以调用全部方法 变量声明\n已被声明的变量不能再次声明 _被用来抛弃值 \u0026amp;返回地址，*指针变量 全局变量只能用普通方法声明，常用:= 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package main import ( \u0026#34;fmt\u0026#34; ) // 声明变量四种方式 var gA int = 100 func main() { //声明全局变量前三种没问题，第四种只能在函数体内声明 var a int //默认值0 fmt.Println(\u0026#34;a = \u0026#34;, a) fmt.Printf(\u0026#34;a = %T\\n\u0026#34;, a) var b int = 100 fmt.Println(\u0026#34;b = \u0026#34;, b) fmt.Printf(\u0026#34;b = %T\\n\u0026#34;, b) //不声明类型直接赋值 var c = 100 fmt.Println(\u0026#34;c = \u0026#34;, c) fmt.Printf(\u0026#34;c = %T\\n\u0026#34;, c) var d string = \u0026#34;abcd\u0026#34; fmt.Println(\u0026#34;d = \u0026#34;, d) fmt.Printf(\u0026#34;d = %T\\n\u0026#34;, d) //先初始化在赋值 e := 100 //fmt.Printf(\u0026#34;e = %s, type of e = %T\\n\u0026#34;, e, e) fmt.Println(\u0026#34;e = \u0026#34;, e) fmt.Printf(\u0026#34;e = %T\\n\u0026#34;, e) fmt.Println(\u0026#34;gA = \u0026#34;, gA) //声明多个变量 var xx, yy int = 100, 200 fmt.Println(\u0026#34;xx = \u0026#34;, xx, \u0026#34;, yy = \u0026#34;, yy) var ( aa = 100 bb = 200 ) fmt.Println(\u0026#34;aa = \u0026#34;, aa, \u0026#34;, bb = \u0026#34;, bb) } 数据类型\n常量\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import ( \u0026#34;fmt\u0026#34; ) const ( //const里通过iota，每行累加1，第一行默认0, 枚举 Beijing = iota //0 Shanghai Shenzhen ) func main() { //常量(只读) const length int = 10 fmt.Println(\u0026#34;length = \u0026#34;, length) fmt.Println(\u0026#34;Beijing = \u0026#34;, Beijing) fmt.Println(\u0026#34;Shanghai = \u0026#34;, Shanghai) fmt.Println(\u0026#34;Shenzhen = \u0026#34;, Shenzhen) } 多个返回值，形参\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( \u0026#34;fmt\u0026#34; ) // 匿名形参 func foo1(a string, b int) (int, int) { fmt.Println(\u0026#34;a = \u0026#34;, a) fmt.Println(\u0026#34;b = \u0026#34;, b) return 666, 777 } // 有名形参，可以写成（r1, r2 int) func foo2(a string, b int) (r1 int, r2 int) { fmt.Println(\u0026#34;a = \u0026#34;, a) fmt.Println(\u0026#34;b = \u0026#34;, b) r1 = 1000 r2 = 2000 return } func main() { ret1, ret2 := foo1(\u0026#34;haha\u0026#34;, 999) fmt.Println(\u0026#34;ret1 = \u0026#34;, ret1, \u0026#34;ret2 = \u0026#34;, ret2) ret1, ret2 = foo2(\u0026#34;foo2\u0026#34;, 222) fmt.Println(\u0026#34;ret1 = \u0026#34;, ret1, \u0026#34;ret2 = \u0026#34;, ret2) } 指针\n条件判断补充\nswitch 自带 break，继续执行 case 加 fallthrough，default 默认运行\nselect\ndefer 函数\n相当于 final，函数结尾执行，以压栈的方式先入后出 defer 和 main，return 函数比 defer 先执行 数组\n固定大小，传参传值\n1 var myArray1 [10]int 动态数组传参传指针，引用\n1 myArray ：= []int{1,2,3,4} 切片四种方式，声明切片但是不分配空间\n1 2 3 4 5 6 7 slice1 := []int{1,2,3} var slice1 []int \\\\ slice1 = make([int,3]) var slice []int = make([]int,3) slice1 := make([]int, 3) nil 空\nlen 长度，cap 容量\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import \u0026#34;fmt\u0026#34; func main() { s := []int{1, 2, 3} s1 := s[0:2]\t//S和s1指向同个空间 s1[0] = 100 fmt.Println(s) //[100 2 3] fmt.Println(s1)\t//[100 2] s2 := make([]int, 3) copy(s2, s)\t//s2复制s指向新的空间 fmt.Println(s2)\t//[100 2 3] s2[0] = 1000 fmt.Println(s) fmt.Println(s1) fmt.Println(s2) } map\nmap3 种声明方式\nmap 的方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package main import \u0026#34;fmt\u0026#34; func printMap(cityMap map[string]string) { //cityMap引用传递 for key, value := range cityMap { fmt.Println(\u0026#34;key = \u0026#34;, key) fmt.Println(\u0026#34;value = \u0026#34;, value) } } func ChangeValue(cityMap map[string]string) { cityMap[\u0026#34;England\u0026#34;] = \u0026#34;London\u0026#34; } func main() { cityMap := make(map[string]string) //添加 cityMap[\u0026#34;China\u0026#34;] = \u0026#34;Beijing\u0026#34; cityMap[\u0026#34;Japan\u0026#34;] = \u0026#34;Tokyo\u0026#34; cityMap[\u0026#34;USA\u0026#34;] = \u0026#34;NewYork\u0026#34; //遍历 printMap(cityMap) //删除 delete(cityMap, \u0026#34;China\u0026#34;) //修改 ChangeValue(cityMap) fmt.Println(\u0026#34;------\u0026#34;) //遍历 printMap(cityMap) } 结构体\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import \u0026#34;fmt\u0026#34; type Book struct { title string auth string } func changeBook(book Book) { //指针传递 book.auth = \u0026#34;666\u0026#34; } func changeBook2(book *Book) { //指针传递 book.auth = \u0026#34;777\u0026#34; } func main() { var book1 Book book1.title = \u0026#34;Golang\u0026#34; book1.auth = \u0026#34;zhuang3\u0026#34; fmt.Printf(\u0026#34;%v\\n\u0026#34;, book1) changeBook(book1) fmt.Printf(\u0026#34;%v\\n\u0026#34;, book1) changeBook2(\u0026amp;book1) fmt.Printf(\u0026#34;%v\\n\u0026#34;, book1) } 类方法\n大写字母开头的方法是公有，小写是私有\n类定义的方法 func(副本 *结构体) 类方法名（）类型{}\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import \u0026#34;fmt\u0026#34; type Hero struct { Name string Ad int level int //私有变量 } func (this *Hero) Show() { fmt.Println(\u0026#34;Name= \u0026#34;, this.Name) fmt.Println(\u0026#34;Ad= \u0026#34;, this.Ad) fmt.Println(\u0026#34;Level= \u0026#34;, this.level) } func (this *Hero) GetName() string { return this.Name } func (this *Hero) SetName(newName string) { this.Name = newName } func main() { hero := Hero{Name: \u0026#34;zhang3\u0026#34;, Ad: 100, level: 1} hero.Show() hero.SetName(\u0026#34;li4\u0026#34;) hero.Show() } 父类与子类 继承\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 package main import \u0026#34;fmt\u0026#34; type Hero struct { name string sex string } func (this *Hero) Show() { fmt.Println(\u0026#34;name= \u0026#34;, this.name) } func (this *Hero) Getname() string { return this.name } func (this *Hero) Setname(newname string) { this.name = newname } type SuperMan struct { Hero //继承Hero类方法 level int } func (this *SuperMan) Eat() { fmt.Println(\u0026#34;SuperMan.Eat()...\u0026#34;) } func (this *SuperMan) Fly() { fmt.Println(\u0026#34;SuperMan.Fly()...\u0026#34;) } func (this *SuperMan) Print() { fmt.Println(\u0026#34;name= \u0026#34;, this.name) fmt.Println(\u0026#34;sex= \u0026#34;, this.sex) fmt.Println(\u0026#34;level= \u0026#34;, this.level) } func main() { hero := Hero{\u0026#34;zhang3\u0026#34;, \u0026#34;female\u0026#34;} hero.Show() hero.Setname(\u0026#34;li4\u0026#34;) hero.Show() //s := SuperMan{Hero{\u0026#34;li4\u0026#34;, \u0026#34;female\u0026#34;}, 88}\t//容易重复 var s SuperMan s.name = \u0026#34;li4\u0026#34; s.sex = \u0026#34;male\u0026#34; s.level = 88 s.Show() s.Fly() s.Print() } 多态与接口\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 package main import \u0026#34;fmt\u0026#34; type AnimalIF interface { //父类接口 Sleep() GetColor() string GetType() string } type Cat struct { //子类 color string } func (this *Cat) Sleep() { //定义父类方法 fmt.Println(\u0026#34;Cat is Sleep\u0026#34;) } func (this *Cat) GetColor() string { //报错返回值过多 return this.color } func (this *Cat) GetType() string { return \u0026#34;Cat\u0026#34; } type Dog struct { color string } func (this *Dog) Sleep() { fmt.Println(\u0026#34;Dog is Sleep\u0026#34;) } func (this *Dog) GetColor() string { return this.color } func (this *Dog) GetType() string { return \u0026#34;Dog\u0026#34; } func showAnimal(animal AnimalIF) { animal.Sleep() fmt.Println(\u0026#34;color = \u0026#34;, animal.GetColor()) // fmt.Println(\u0026#34;type = \u0026#34;, animal.GetType()) } func main() { // var animal AnimalIF // animal = \u0026amp;Cat{\u0026#34;Green\u0026#34;}\t赋值，父类接口指针指向子类的具体对象，再用父类调用接口 // animal.Sleep() // animal = \u0026amp;Dog{\u0026#34;Yellow\u0026#34;} // animal.Sleep() cat := Cat{\u0026#34;Green\u0026#34;} dog := Dog{\u0026#34;Yellow\u0026#34;} showAnimal(\u0026amp;cat) showAnimal(\u0026amp;dog) } 万能通用接口\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import \u0026#34;fmt\u0026#34; func myFunc(arg interface{}) { //通用万能类型 空接口 fmt.Println(\u0026#34;myFunc is called\u0026#34;) fmt.Println(arg) //interface{}区分底层数据类型，可以用类型断言arg.(string) value, ok := arg.(string) if !ok { fmt.Println(\u0026#34;arg is not string type\u0026#34;) } else { fmt.Println(\u0026#34;arg is string type, value = \u0026#34;, value) fmt.Printf(\u0026#34;value type is %T\\n\u0026#34;, value) } } type Book struct { auth string } func main() { book := Book{\u0026#34;Golang\u0026#34;} myFunc(book) myFunc(100) myFunc(\u0026#34;abc\u0026#34;) } 断言\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import ( \u0026#34;fmt\u0026#34; ) func main() { var a int //pair\u0026lt;statictype:string, value:\u0026#34;aceld\u0026#34;\u0026gt; // a = \u0026#34;aceld\u0026#34; a = 123 //pair\u0026lt;type:string, value:\u0026#34;aceld\u0026#34;\u0026gt; var allType interface{} allType = a str, st := allType.(string) fmt.Println(str) fmt.Println(st) } reflect\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; ) type User struct { Id int Name string Age int } func (this User) Call() { fmt.Println(\u0026#34;user is called\u0026#34;) fmt.Printf(\u0026#34;%v\\n\u0026#34;, this) } func main() { user := User{1, \u0026#34;Aceld\u0026#34;, 18} DoFileAndMethod(user) } func DoFileAndMethod(input interface{}) { //获取input的type inputType := reflect.TypeOf(input) fmt.Println(\u0026#34;inputType is :\u0026#34;, inputType.Name()) //获取input的value inputValue := reflect.ValueOf(input) fmt.Println(\u0026#34;inputValue is :\u0026#34;, inputValue) //通过type 获取里面的字段 //1. 获取interface的reflect.Type, 通过Type得到NumField，进行遍历 //2. 得到每个filed, 数据类型 //3. 通过 filed有一个Interface() 方法等到对应的value //通过type 获取里面的方法，调用 for i := 0; i \u0026lt; inputType.NumField(); i++ { field := inputType.Field(i) value := inputValue.Field(i).Interface() fmt.Printf(\u0026#34;%s: %v = %v\\n\u0026#34;, field.Name, field.Type, value) } //通过type 获取里面的方法，调用 for i := 0; i \u0026lt; inputType.NumMethod(); i++ { m := inputType.Method(i) fmt.Printf(\u0026#34;%s: %v\\n\u0026#34;, m.Name, m.Type) } } reflect 中的 tag 标签\n","date":"2025-01-06T21:35:04+08:00","permalink":"https://cancanneed64.github.io/p/go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/","title":"Go语言入门"},{"content":"test for Prism 1 print(\u0026#34;let me see\u0026#34;) ","date":"2024-12-02T21:29:51+08:00","permalink":"https://cancanneed64.github.io/p/prism/","title":"Prism"},{"content":"simple markdown Typora官方介绍\n06/07/2022 14:12\n目录\u0026quot;[TOC]\u0026quot; [TOC]\n1. 常用标题/列表 \u0026ldquo;#” 每级标题 \u0026ldquo;*\u0026ldquo;无序列表\n无序 \u0026ldquo;1.\u0026ldquo;有序列表\n有序 \u0026ldquo;-[]\u0026rdquo; - \u0026ldquo;[x]\u0026ldquo;任务列表\n1 2 2.插入分段 \u0026ldquo;```\u0026ldquo;插入代码 \u0026ldquo;\u0026gt;\u0026ldquo;插入话题 | First Header | Second Header | 插入表格，标题行:表示对齐 \u0026ldquo;[^footnote]:\u0026rdquo; 脚注 \u0026ldquo;***\u0026ldquo;或\u0026rdquo;\u0026mdash;\u0026ldquo;分段 \u0026ldquo;\u0026ldquo;插入网址 \u0026ldquo;[exam][id]\u0026rdquo; \u0026ldquo;[id]:\u0026rdquo; 跳转 \u0026ldquo;\u0026lt;\u0026gt;\u0026ldquo;超链接 \u0026ldquo;\u0026ldquo;插入图片 \u0026ldquo;::\u0026ldquo;表情\n3.字体 \u0026ldquo;*\u0026ldquo;斜体 \u0026ldquo;**\u0026ldquo;加粗 \u0026ldquo;`\u0026ldquo;代码 \u0026ldquo;~~\u0026ldquo;划掉 \u0026ldquo;\u0026ldquo;下划线 \u0026ldquo;====\u0026ldquo;高亮 @\n","date":"2024-10-04T00:12:04+08:00","permalink":"https://cancanneed64.github.io/p/markdown/","title":"Markdown"},{"content":"git 1. 安装 参考链接 关闭SSL认证 找到.gitconfig文件\n1 2 3 4 [http] sslverify = false [url “https://”] insteadOf = git:// 2. 配置 1 2 3 4 5 6 名称 `git config --global user.namer \u0026#34;username\u0026#34;` 邮箱 `git config --global user.email \u0026#34;email\u0026#34;` 自动颜色 `git config --global color.ui auto` 可以在.gitconfig文件中查看\n1 2 3 4 5 6 7 8 9 10 11 [user] namer = email = [color] ui = auto [http] sslverify = false [url \u0026#34;https://\u0026#34;] insteadOf = git:// [init] defaultBranch = main 3. SSH-key 1 2 3 4 5 6 7 8 9 10 11 设置私钥密码 `ssh-keygen -t rsa -C \u0026#34;email` \u0026gt;第一个输入回车，接着输入fingerprint密码 回到github页面设置SSH ![github ssh.jpg](../_resources/github%20ssh.jpg) key中填入返回的结果 `cat ~/.ssh/id_rsa.pub` 然后输入即可生效 `ssh -T git@github.com` 4. 仓库一般操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 克隆仓库 `git clone git@github.com:cancanneed64/test.git` github需先创建仓库 本地创建仓库并初始化 `mkdir test ` `git init` 查看状态 `git status` 暂存区添加 `git add` 添加注释并提交 `git commit -m \u0026#34;\u0026#34;` \u0026gt; 如果直接git commit会打开编辑器，如果直接关闭会中止 查看日志 `git log` 简述多个 `git log --pretty=short` 前后差别 `git log -p` 查看工作树和暂存区的差别 `git diff` 最新一次提交 `git diff head` ## 5. 分支操作 显示分支 `git branch` 切换分支（-代替上一个分支） `git checkout master` 创建切换分支 `git checkout -b feature-A` 合并分支 `git merge` 记录合并 `git merge --no-ff feature-A` 图表形式查看分支 `git log --graph` 恢复分支节点状态 `git reset --hard ` 查看当前仓库执行过的操作日志，git log只能看以当前状态为终点的日志 `git reflog` 解决冲突示范\n1 2 3 4 5 6 git checkout master git reset --hard git merge --no-ff fix-B 修改内容 git add git commit -m \u0026#34;\u0026#34; 修改上一条信息 git commit --amend\n压缩历史，合并上一个提交 git rebase -i\nHEAD-2选定当前分支中包含HEAD在内的两个最新历史记录为对象在编辑器中打开\n6.仓库推拉 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 添加远程仓库，设置为origin `git remote add origin git@github.com:id/file.git` 本地仓库内容推送到远程仓库 `git push -u origin master` 获取远程仓库，自动设置为origin，本地与仓库master分支相同 `git clone git@github.com:id/file.git` 查看远程和本地的分支 `git branch -a` 以名为origin 的仓库（这里指GitHub 端的仓库）的feature-D 分 支为来源，在本地仓库中创建feature-D 分支 `git checkout -b feature-D origin/feature-D` 从远程仓库拉取 `git pull origin feature-D` 7. Pull request 1 2 3 4 5 给原仓库设置名称 `git remote add upstream git://github.com/file.git` 从远程仓库获取最新代码，将upstream/master 分支与当前分（master）合并 `git fetch upstream` error git push origin master remote: error: GH007: Your push would publish a private email address.\nKeep my email addresses private 8. 一般操作 …or create a new repository on the command line\n1 2 3 4 5 6 7 echo \u0026#34;# sample\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/melodyka/sample.git git push -u origin main …or push an existing repository from the command line\n1 2 3 git remote add origin https://github.com/melodyka/sample.git git branch -M main git push -u origin main …or import code from another repository\n1 You can initialize this repository with code from a Subversion, Mercurial, or TFS project. ! [rejected] main -\u0026gt; main (fetch first) error: failed to push some refs to\n9. 其他操作 撤回未推送最新一次提交 git reset HEAD^ 或 直接删除git重新开始\n切换仓库 git remote set-url origin URL 或git remote rm origin git remote add origin url\n删除仓库内容\n1 2 3 4 git rm * -f -r#删除所有文件夹包括文件 git add . git commit -m \u0026#34;***\u0026#34; #增加提交信息 git push origin master#master是远程分支 ","date":"2024-10-03T00:00:00Z","permalink":"https://cancanneed64.github.io/p/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"Git常用命令"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://cancanneed64.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://cancanneed64.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://cancanneed64.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://cancanneed64.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://cancanneed64.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://cancanneed64.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://cancanneed64.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://cancanneed64.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://cancanneed64.github.io/p/emoji-support/","title":"Emoji Support"}]